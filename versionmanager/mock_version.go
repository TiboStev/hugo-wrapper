// Code generated by MockGen. DO NOT EDIT.
// Source: version.go

// Package versionmanager is a generated GoMock package.
package versionmanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcoreVersionParser is a mock of coreVersionParser interface.
type MockcoreVersionParser struct {
	ctrl     *gomock.Controller
	recorder *MockcoreVersionParserMockRecorder
}

// MockcoreVersionParserMockRecorder is the mock recorder for MockcoreVersionParser.
type MockcoreVersionParserMockRecorder struct {
	mock *MockcoreVersionParser
}

// NewMockcoreVersionParser creates a new mock instance.
func NewMockcoreVersionParser(ctrl *gomock.Controller) *MockcoreVersionParser {
	mock := &MockcoreVersionParser{ctrl: ctrl}
	mock.recorder = &MockcoreVersionParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcoreVersionParser) EXPECT() *MockcoreVersionParserMockRecorder {
	return m.recorder
}

// parse mocks base method.
func (m *MockcoreVersionParser) parse(version string) (*coreVersion, versionPrecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parse", version)
	ret0, _ := ret[0].(*coreVersion)
	ret1, _ := ret[1].(versionPrecision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// parse indicates an expected call of parse.
func (mr *MockcoreVersionParserMockRecorder) parse(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parse", reflect.TypeOf((*MockcoreVersionParser)(nil).parse), version)
}
